package com.agriculture.services;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.ResourceAccessException;
import jakarta.annotation.PostConstruct;

import java.util.HashMap;
import java.util.Map;

@Service
public class DeepSeekService {

    @Value("${deepseek.api.url:https://api.deepseek.com/v1/chat/completions}")
    private String apiUrl;

    @Value("${deepseek.api.key:}")
    private String apiKey;

    @Value("${deepseek.api.model:deepseek-chat}")
    private String model;

    @Value("${deepseek.api.timeout:30000}")
    private int timeout;

    @Value("${deepseek.api.max-retries:3}")
    private int maxRetries;

    @Value("${deepseek.api.retry-delay:1000}")
    private int retryDelay;

    private RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public DeepSeekService() {
        this.objectMapper = new ObjectMapper();
    }

    @PostConstruct
    public void init() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RestTemplate —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π
        org.springframework.http.client.SimpleClientHttpRequestFactory factory = 
            new org.springframework.http.client.SimpleClientHttpRequestFactory();
        factory.setConnectTimeout(timeout);
        factory.setReadTimeout(timeout);
        
        this.restTemplate = new RestTemplate(factory);
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–ª–∞–Ω —É—Ö–æ–¥–∞ —É DeepSeek API —Å retry –ª–æ–≥–∏–∫–æ–π
     */
    public JsonNode requestCarePlan(String culture, String region, String gardenType) {
        System.out.println("üå± –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞ —É—Ö–æ–¥–∞ –¥–ª—è: " + culture + " –≤ —Ä–µ–≥–∏–æ–Ω–µ " + region + " (" + gardenType + ")");
        
        String prompt = buildPrompt(culture, region, gardenType);
        
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            long startTime = System.currentTimeMillis();
            try {
                System.out.println("üîÑ –ü–æ–ø—ã—Ç–∫–∞ " + attempt + "/" + maxRetries + " –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API...");
                
                String response = sendRequest(prompt);
                
                long duration = System.currentTimeMillis() - startTime;
                System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API –∑–∞ " + duration + "–º—Å");
                
                return parseResponse(response);
            } catch (Exception e) {
                long duration = System.currentTimeMillis() - startTime;
                System.err.println("‚ùå –ü–æ–ø—ã—Ç–∫–∞ " + attempt + " –Ω–µ—É–¥–∞—á–Ω–∞ –∑–∞ " + duration + "–º—Å: " + e.getMessage());
                
                if (attempt == maxRetries) {
                    throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API –ø–æ—Å–ª–µ " + maxRetries + " –ø–æ–ø—ã—Ç–æ–∫: " + e.getMessage(), e);
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∏ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                System.out.println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ " + retryDelay + "–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
                try {
                    Thread.sleep(retryDelay);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("–ü—Ä–µ—Ä–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏", ie);
                }
            }
        }
        
        throw new RuntimeException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ retry –ª–æ–≥–∏–∫–µ");
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º—Ç –¥–ª—è DeepSeek API –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    private String buildPrompt(String culture, String region, String gardenType) {
        return String.format("""
            –¢—ã ‚Äî –∞–≥—Ä–æ–Ω–æ–º-—ç–∫—Å–ø–µ—Ä—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            
            –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
            1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            2. –ò–∑–≤–ª–µ–∫–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã
            3. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å—Ç—Ä–æ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ
            4. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            
            –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–†–û–°–ê:
            - –ö—É–ª—å—Ç—É—Ä–∞: %s
            - –†–µ–≥–∏–æ–Ω: %s
            - –¢–∏–ø –ø–æ—Å–∞–¥–∫–∏: %s
            - –ò—Å—Ç–æ—á–Ω–∏–∫: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏. –¢–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –º–µ—Ç–æ–¥–∏—á–∫–∏, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã.
            
            –°–•–ï–ú–ê JSON:
            {
              "culture": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã",
              "region": "—Ä–µ–≥–∏–æ–Ω",
              "garden_type": "—Ç–∏–ø –ø–æ—Å–∞–¥–∫–∏",
              "operations": [
                {
                  "type": "—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–¥–∫–æ—Ä–º–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–ª–∏–≤)",
                  "fase": "—Ñ–∞–∑–∞ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è",
                  "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ü–µ–ª–∏",
                  "period": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Å—è—Ü/–ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏",
                  "trigger": "—É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ñ–∞–∑–∞ —Ä–æ—Å—Ç–∞, –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)",
                  "application_condition": "—É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è (–Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π, –±–æ–ª–µ–∑–Ω–µ–π, —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–µ—Ñ–∏—Ü–∏—Ç–∞)",
                  "materials": [
                    {
                      "name": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è/–ø—Ä–µ–ø–∞—Ä–∞—Ç–∞",
                      "type": "—Ç–∏–ø (–º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–µ, –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ, —Ñ—É–Ω–≥–∏—Ü–∏–¥, –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥)",
                      "norm": "–Ω–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                      "method": "–º–µ—Ç–æ–¥ –≤–Ω–µ—Å–µ–Ω–∏—è (–≤–Ω–µ–∫–æ—Ä–Ω–µ–≤–∞—è, –ø–æ–ª–∏–≤ –ø–æ–¥ –∫–æ—Ä–µ–Ω—å, –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ)",
                      "frequency": "–∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã",
                      "warning": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤ –ø–æ—á–≤–µ, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)",
                      "alternatives": [
                        {
                          "name": "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ/–ø—Ä–µ–ø–∞—Ä–∞—Ç",
                          "type": "—Ç–∏–ø –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
                          "norm": "–Ω–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è",
                          "warning": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                          "comment": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞/–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
                        }
                      ]
                    }
                  ],
                  "source": "–∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                }
              ]
            }
            
            –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
            - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ "materials"
            - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É–∫–∞–∑—ã–≤–∞–π –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ "alternatives"
            - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–π –ø–æ–ª–µ "warning" —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
            - –î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü, –¥–µ–∫–∞–¥–∞)
            - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –≤–º–µ—Å—Ç–æ –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –∏ —Ç.–¥.)
            - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–æ–≤ –∏ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–µ–Ω–µ–µ —Ç–æ–∫—Å–∏—á–Ω—ã–µ
            - –£—á–∏—Ç—ã–≤–∞–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏ —Ç–∏–ø –ø–æ—á–≤—ã –ø—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –Ω–æ—Ä–º –≤–Ω–µ—Å–µ–Ω–∏—è
            - –£–∫–∞–∑—ã–≤–∞–π —É—Å–ª–æ–≤–∏—è, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∞
            - –í –ø–æ–ª–µ "application_condition" —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è (–Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ—Ä–∞–¥—Å–∫–æ–≥–æ –∂—É–∫–∞, —Ç–ª–∏, —Ñ–∏—Ç–æ—Ñ—Ç–æ—Ä–æ–∑–∞, —Ö–ª–æ—Ä–æ–∑–∞ –ª–∏—Å—Ç—å–µ–≤, –¥–µ—Ñ–∏—Ü–∏—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.)
            - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏
            - –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—â–∏—Ö —Å–∞–π—Ç–æ–≤ (Wikipedia) –∏–ª–∏ —Ñ–æ—Ä—É–º–æ–≤ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
            - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –º–µ—Ç–æ–¥–∏—á–∫–∏, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
            - –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            - –î–æ–±–∞–≤–ª—è–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            
            –ù–∞—á–∏–Ω–∞–π –∞–Ω–∞–ª–∏–∑.
            """, culture, region, gardenType);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
     */
    private String sendRequest(String prompt) {
        if (apiKey == null || apiKey.trim().isEmpty()) {
            throw new RuntimeException("DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }

        System.out.println("üîë API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: " + apiUrl);
        System.out.println("üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º—Ç–∞: " + prompt.length() + " —Å–∏–º–≤–æ–ª–æ–≤");

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + apiKey);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", model);
            requestBody.put("messages", new Object[]{
                Map.of("role", "user", "content", prompt)
            });
            requestBody.put("temperature", 0.1);
            requestBody.put("max_tokens", 4000);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            System.out.println("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP POST –∑–∞–ø—Ä–æ—Å...");
            ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                apiUrl,
                HttpMethod.POST,
                entity,
                new ParameterizedTypeReference<Map<String, Object>>() {}
            );
            
            System.out.println("üì° –ü–æ–ª—É—á–µ–Ω HTTP –æ—Ç–≤–µ—Ç: " + response.getStatusCode());

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                Map<String, Object> responseBody = response.getBody();
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
                if (responseBody.containsKey("choices") && 
                    responseBody.get("choices") instanceof java.util.List) {
                    
                    java.util.List<?> choices = (java.util.List<?>) responseBody.get("choices");
                    if (!choices.isEmpty() && choices.get(0) instanceof Map) {
                        Map<String, Object> choice = (Map<String, Object>) choices.get(0);
                        if (choice.containsKey("message") && choice.get("message") instanceof Map) {
                            Map<String, Object> message = (Map<String, Object>) choice.get("message");
                            if (message.containsKey("content")) {
                                return message.get("content").toString();
                            }
                        }
                    }
                }
                
                throw new RuntimeException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API");
            } else {
                throw new RuntimeException("–û—à–∏–±–∫–∞ API: " + response.getStatusCode());
            }

        } catch (HttpClientErrorException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: " + e.getMessage(), e);
        } catch (ResourceAccessException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API –≤ JsonNode
     */
    private JsonNode parseResponse(String response) {
        try {
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
            String cleanedResponse = response.trim();
            if (cleanedResponse.startsWith("```json")) {
                cleanedResponse = cleanedResponse.substring(7);
            }
            if (cleanedResponse.endsWith("```")) {
                cleanedResponse = cleanedResponse.substring(0, cleanedResponse.length() - 3);
            }
            cleanedResponse = cleanedResponse.trim();

            return objectMapper.readTree(cleanedResponse);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek: " + e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
     */
    public boolean isApiAvailable() {
        return apiKey != null && !apiKey.trim().isEmpty();
    }
}
