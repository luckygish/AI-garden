package com.agriculture.services;

import com.agriculture.JsonUtils;
import com.agriculture.models.CarePlan;
import com.agriculture.repository.CarePlanRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class CarePlanService {

    private final CarePlanRepository carePlanRepository;
    private final DeepSeekService deepSeekService;
    private final ObjectMapper objectMapper;

    public CarePlanService(CarePlanRepository carePlanRepository, DeepSeekService deepSeekService) {
        this.carePlanRepository = carePlanRepository;
        this.deepSeekService = deepSeekService;
        this.objectMapper = new ObjectMapper();
    }

    public boolean existsByParams(String culture, String region, String gardenType) {
        return carePlanRepository.existsByInputParameters(culture, region, gardenType);
    }

    public Optional<JsonNode> getPlanByParams(String culture, String region, String gardenType) {
        return carePlanRepository.findByInputParameters(culture, region, gardenType)
                .map(CarePlan::getAiGeneratedPlan)
                .map(JsonUtils::parseJson);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —É—Ö–æ–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Transactional
    public CarePlan getOrCreatePlan(String culture, String region, String gardenType) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –ø–ª–∞–Ω–∞ —É—Ö–æ–¥–∞ –¥–ª—è: " + culture + " –≤ —Ä–µ–≥–∏–æ–Ω–µ " + region + " (" + gardenType + ")");
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
        Optional<CarePlan> existingPlan = carePlanRepository.findByInputParameters(culture, region, gardenType);
        if (existingPlan.isPresent()) {
            System.out.println("‚úÖ –ü–ª–∞–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            return existingPlan.get();
        }

        System.out.println("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeepSeek API
        if (!deepSeekService.isApiAvailable()) {
            System.err.println("üö´ DeepSeek API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            throw new RuntimeException("–ü–ª–∞–Ω —É—Ö–æ–¥–∞ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã '" + culture + 
                "' –≤ —Ä–µ–≥–∏–æ–Ω–µ '" + region + "' –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å–∞–¥–∫–∏ '" + gardenType + 
                "' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. DeepSeek API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞.");
        }

        System.out.println("ü§ñ DeepSeek API –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω...");

        // 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É DeepSeek
        JsonNode newPlan = deepSeekService.requestCarePlan(culture, region, gardenType);

        System.out.println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç
        CarePlan savedPlan = savePlanToDatabase(culture, region, gardenType, newPlan);
        
        System.out.println("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: " + savedPlan.getId());
        
        return savedPlan;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    @Transactional
    public CarePlan savePlanToDatabase(String culture, String region, String gardenType, JsonNode planJson) {
        try {
            // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è input_parameters
            ObjectNode inputParamsJson = objectMapper.createObjectNode();
            inputParamsJson.put("culture", culture);
            inputParamsJson.put("region", region);
            inputParamsJson.put("garden_type", gardenType);

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CarePlan
            CarePlan carePlan = new CarePlan();
            carePlan.setInputParameters(inputParamsJson.toString());
            carePlan.setAiGeneratedPlan(planJson.toString());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            return carePlanRepository.save(carePlan);

        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —É—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeepSeek API
     */
    public boolean isDeepSeekAvailable() {
        return deepSeekService.isApiAvailable();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞–Ω–∞–º —É—Ö–æ–¥–∞
     */
    public long getTotalPlansCount() {
        return carePlanRepository.count();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
     */
    public boolean planExists(String culture, String region, String gardenType) {
        return existsByParams(culture, region, gardenType);
    }
}


